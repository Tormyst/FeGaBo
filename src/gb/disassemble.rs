use super::mem::Mem;

macro_rules! p0 {
    ($format:expr) => {
        {
        println!($format);
        1
        }
    }
}

macro_rules! p8 {
    ($format:expr, $addr:expr, $mem:expr) => {
        {
        println!($format, $mem.load_8($addr + 1));
        2
        }
    }
}

macro_rules! p16 {
    ($format:expr, $addr:expr, $mem:expr) => {
        {
        println!($format, $mem.load_16($addr + 1));
        3
        }
    }
}

pub fn daInst(addr: u16, mem: &mut Mem) -> usize {
    let op = mem.load_8(addr);
    match op {
        0x00 => p0!("NOP"),
        0x01 => p16!("LD BC, 0x{:04X}", addr, mem),
        0x02 => p0!("LD (BC),A"),
        0x03 => p0!("INC BC"),
        0x04 => p0!("INC B"),
        0x05 => p0!("DEC B"),
        0x06 => p8!("LD B, {:02X}", addr, mem),
        0x07 => p0!("RLCA"),
        0x08 => p16!("LD ({:04X}), SP", addr, mem),
        0x09 => p0!("ADD HL, BC"),
        0x0A => p0!("LD A, (BC)"),
        0x0B => p0!("DEC BC"),
        0x0C => p0!("INC C"),
        0x0D => p0!("DEC C"),
        0x0E => p8!("LD C, {:02X}", addr, mem),
        0x0F => p0!("RRCA"),

        0x10 => p0!("STOP"),
        0x11 => p16!("LD DE, 0x{:04X}", addr, mem),
        0x12 => p0!("LD (DE),A"),
        0x13 => p0!("INC DE"),
        0x14 => p0!("INC D"),
        0x15 => p0!("DEC D"),
        0x16 => p8!("LD D, {:02X}", addr, mem),
        0x17 => p0!("RLA"),
        0x18 => p8!("JR {:02X}", addr, mem),
        0x19 => p0!("ADD HL, DE"),
        0x1A => p0!("LD A, (DE)"),
        0x1B => p0!("DEC DE"),
        0x1C => p0!("INC E"),
        0x1D => p0!("DEC E"),
        0x1E => p8!("LD E, {:02X}", addr, mem),
        0x1F => p0!("RRA"),

        0x20 => p8!("JR NZ, {:02X}", addr, mem),
        0x21 => p16!("LD HL, 0x{:04X}", addr, mem),
        0x22 => p0!("LD (HL+),A"),
        0x23 => p0!("INC HL"),
        0x24 => p0!("INC H"),
        0x25 => p0!("DEC H"),
        0x26 => p8!("LD H, {:02X}", addr, mem),
        0x27 => p0!("DAA"),
        0x28 => p8!("JR Z, {:02X}", addr, mem),
        0x29 => p0!("ADD HL, HL"),
        0x2A => p0!("LD A, (HL+)"),
        0x2B => p0!("DEC HL"),
        0x2C => p0!("INC L"),
        0x2D => p0!("DEC L"),
        0x2E => p8!("LD L, {:02X}", addr, mem),
        0x2F => p0!("CPL"),

        0x30 => p8!("JR NC, {:02X}", addr, mem),
        0x31 => p16!("LD SP, 0x{:04X}", addr, mem),
        0x32 => p0!("LD (HL-),A"),
        0x33 => p0!("INC SP"),
        0x34 => p0!("INC (HL)"),
        0x35 => p0!("DEC (HL)"),
        0x36 => p8!("LD (HL), {:02X}", addr, mem),
        0x37 => p0!("SCF"),
        0x38 => p8!("JR C, {:02X}", addr, mem),
        0x39 => p0!("ADD HL, SP"),
        0x3A => p0!("LD A, (HL-)"),
        0x3B => p0!("DEC SP"),
        0x3C => p0!("INC A"),
        0x3D => p0!("DEC A"),
        0x3E => p8!("LD A, {:02X}", addr, mem),
        0x3F => p0!("CCF"),

        0x40 => p0!("LD B, B"),
        0x41 => p0!("LD B, C"),
        0x42 => p0!("LD B, D"),
        0x43 => p0!("LD B, E"),
        0x44 => p0!("LD B, H"),
        0x45 => p0!("LD B, L"),
        0x46 => p0!("LD B, (HL)"),
        0x47 => p0!("LD B, A"),
        0x48 => p0!("LD C, B"),
        0x49 => p0!("LD C, C"),
        0x4A => p0!("LD C, D"),
        0x4B => p0!("LD C, E"),
        0x4C => p0!("LD C, H"),
        0x4D => p0!("LD C, L"),
        0x4E => p0!("LD C, (HL)"),
        0x4F => p0!("LD C, A"),

        0x50 => p0!("LD D, B"),
        0x51 => p0!("LD D, C"),
        0x52 => p0!("LD D, D"),
        0x53 => p0!("LD D, E"),
        0x54 => p0!("LD D, H"),
        0x55 => p0!("LD D, L"),
        0x56 => p0!("LD D, (HL)"),
        0x57 => p0!("LD D, A"),
        0x58 => p0!("LD E, B"),
        0x59 => p0!("LD E, C"),
        0x5A => p0!("LD E, D"),
        0x5B => p0!("LD E, E"),
        0x5C => p0!("LD E, H"),
        0x5D => p0!("LD E, L"),
        0x5E => p0!("LD E, (HL)"),
        0x5F => p0!("LD E, A"),

        0x60 => p0!("LD H, B"),
        0x61 => p0!("LD H, C"),
        0x62 => p0!("LD H, D"),
        0x63 => p0!("LD H, E"),
        0x64 => p0!("LD H, H"),
        0x65 => p0!("LD H, L"),
        0x66 => p0!("LD H, (HL)"),
        0x67 => p0!("LD H, A"),
        0x68 => p0!("LD L, B"),
        0x69 => p0!("LD L, C"),
        0x6A => p0!("LD L, D"),
        0x6B => p0!("LD L, E"),
        0x6C => p0!("LD L, H"),
        0x6D => p0!("LD L, L"),
        0x6E => p0!("LD L, (HL)"),
        0x6F => p0!("LD L, A"),

        0x70 => p0!("LD (HL), B"),
        0x71 => p0!("LD (HL), C"),
        0x72 => p0!("LD (HL), D"),
        0x73 => p0!("LD (HL), E"),
        0x74 => p0!("LD (HL), H"),
        0x75 => p0!("LD (HL), L"),
        0x76 => p0!("HALT"),
        0x77 => p0!("LD (HL), A"),
        0x78 => p0!("LD A, B"),
        0x79 => p0!("LD A, C"),
        0x7A => p0!("LD A, D"),
        0x7B => p0!("LD A, E"),
        0x7C => p0!("LD A, H"),
        0x7D => p0!("LD A, L"),
        0x7E => p0!("LD A, (HL)"),
        0x7F => p0!("LD A, A"),

        0x80 => p0!("ADD A, B"),
        0x81 => p0!("ADD A, C"),
        0x82 => p0!("ADD A, D"),
        0x83 => p0!("ADD A, E"),
        0x84 => p0!("ADD A, H"),
        0x85 => p0!("ADD A, L"),
        0x86 => p0!("ADD A, (HL)"),
        0x87 => p0!("ADD A, A"),
        0x88 => p0!("ADC A, B"),
        0x89 => p0!("ADC A, C"),
        0x8A => p0!("ADC A, D"),
        0x8B => p0!("ADC A, E"),
        0x8C => p0!("ADC A, H"),
        0x8D => p0!("ADC A, L"),
        0x8E => p0!("ADC A, (HL)"),
        0x8F => p0!("ADC A, A"),

        0x90 => p0!("SUB B"),
        0x91 => p0!("SUB C"),
        0x92 => p0!("SUB D"),
        0x93 => p0!("SUB E"),
        0x94 => p0!("SUB H"),
        0x95 => p0!("SUB L"),
        0x96 => p0!("SUB (HL)"),
        0x97 => p0!("SUB A"),
        0x98 => p0!("SBC B"),
        0x99 => p0!("SBC C"),
        0x9A => p0!("SBC D"),
        0x9B => p0!("SBC E"),
        0x9C => p0!("SBC H"),
        0x9D => p0!("SBC L"),
        0x9E => p0!("SBC (HL)"),
        0x9F => p0!("SBC A"),

        0xA0 => p0!("AND B"),
        0xA1 => p0!("AND C"),
        0xA2 => p0!("AND D"),
        0xA3 => p0!("AND E"),
        0xA4 => p0!("AND H"),
        0xA5 => p0!("AND L"),
        0xA6 => p0!("AND (HL)"),
        0xA7 => p0!("AND A"),
        0xA8 => p0!("XOR B"),
        0xA9 => p0!("XOR C"),
        0xAA => p0!("XOR D"),
        0xAB => p0!("XOR E"),
        0xAC => p0!("XOR H"),
        0xAD => p0!("XOR L"),
        0xAE => p0!("XOR (HL)"),
        0xAF => p0!("XOR A"),

        0xB0 => p0!("OR B"),
        0xB1 => p0!("OR C"),
        0xB2 => p0!("OR D"),
        0xB3 => p0!("OR E"),
        0xB4 => p0!("OR H"),
        0xB5 => p0!("OR L"),
        0xB6 => p0!("OR (HL)"),
        0xB7 => p0!("OR A"),
        0xB8 => p0!("CP B"),
        0xB9 => p0!("CP C"),
        0xBA => p0!("CP D"),
        0xBB => p0!("CP E"),
        0xBC => p0!("CP H"),
        0xBD => p0!("CP L"),
        0xBE => p0!("CP (HL)"),
        0xBF => p0!("CP A"),

        0xC0 => p0!("RET NZ"),
        0xC1 => p0!("POP BC"),
        0xC2 => p16!("JP NZ, {:04X}", addr, mem),
        0xC3 => p16!("JP {:04X}", addr, mem),
        0xC4 => p16!("CALL NZ, {:04X}", addr, mem),
        0xC5 => p0!("PUSH BC"),
        0xC6 => p8!("ADD A, {:02X}", addr, mem),
        0xC7 => p0!("RST 00H"),
        0xC8 => p0!("RET Z"),
        0xC9 => p0!("RET"),
        0xCA => p16!("JP Z, {:04X}", addr, mem),
        // 0xCB => second table,
        0xCC => p16!("CALL Z, {:04X}", addr, mem),
        0xCD => p16!("CALL {:04X}", addr, mem),
        0xCE => p8!("ADC A, {:02X}", addr, mem),
        0xCF => p0!("RST 08H"),

        0xD0 => p0!("RET NC"),
        0xD1 => p0!("POP DE"),
        0xD2 => p16!("JP NC, {:04X}", addr, mem),
        // 0xD3 => NO instruction,
        0xD4 => p16!("CALL NC, {:04X}", addr, mem),
        0xD5 => p0!("PUSH DE"),
        0xD6 => p8!("SUB {:02X}", addr, mem),
        0xD7 => p0!("RST 10H"),
        0xD8 => p0!("RET C"),
        0xD9 => p0!("RETI"),
        0xDA => p16!("JP C, {:04X}", addr, mem),
        // 0xDB => NO instruction,
        0xDC => p16!("CALL C, {:04X}", addr, mem),
        // 0xDD => NO instruction,
        0xDE => p8!("SBC A, {:02X}", addr, mem),
        0xDF => p0!("RST 18H"),

        0xE0 => p8!("LDH ({:02X}), A", addr, mem),
        0xE1 => p0!("POP HL"),
        0xE2 => p0!("LD (C), A"),
        // 0xE3 => NO instruction,
        // 0xE4 => NO instruction,
        0xE5 => p0!("PUSH HL"),
        0xE6 => p8!("AND {:02X}", addr, mem),
        0xE7 => p0!("RST 20H"),
        0xE8 => p8!("ADD SP, {:02X}", addr, mem),
        0xE9 => p0!("JP (HL)"),
        0xEA => p16!("LD ({:04X}), A", addr, mem),
        // 0xEB => NO instruction,
        // 0xEC => NO instruction,
        // 0xED => NO instruction,
        0xEE => p8!("XOR {:02X}", addr, mem),
        0xEF => p0!("RST 28H"),
        
        0xF0 => p8!("LDH A, ({:02X})", addr, mem),
        0xF1 => p0!("POP AF"),
        0xF2 => p0!("LD A, (C)"),
        0xF3 => p0!("DI"),
        // 0xF4 => NO instruction,
        0xF5 => p0!("PUSH AF"),
        0xF6 => p8!("OR {:02X}", addr, mem),
        0xF7 => p0!("RST 30H"),
        0xF8 => p8!("LD HL, SP+{:02X}", addr, mem),
        0xF9 => p0!("LD SP, HL"),
        0xFA => p16!("LD A, ({:04X})", addr, mem),
        0xFB => p0!("EI"),
        // 0xFC => NO instruction,
        // 0xFD => NO instruction,
        0xFE => p8!("CP {:02X}", addr, mem),
        0xFF => p0!("RST 38H"),

        _ => panic!("Unknown instruction {:02X}", op),
    }
}
